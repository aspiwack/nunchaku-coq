# 1 "src/nunchaku_coq_sexp_lex.mll"
 
  type token =
    | ATOM of string
    | LIST_OPEN
    | LIST_CLOSE
    | EOI

  (* location + message *)
  exception Error of int * int * string

  let error lexbuf msg =
    let start = Lexing.lexeme_start_p lexbuf in
    let line = start.Lexing.pos_lnum in
    let col = start.Lexing.pos_cnum - start.Lexing.pos_bol in
    raise (Error (line,col,msg))

  type unescape_state =
    | Not_escaped
    | Escaped
    | Escaped_int_1 of int
    | Escaped_int_2 of int

  (* remove quotes + unescape *)
  let remove_quotes lexbuf s =
    assert (s.[0] = '"' && s.[String.length s - 1] = '"');
    let buf = Buffer.create (String.length s) in
    let st = ref Not_escaped in
    for i = 1 to String.length s-2 do
      match !st, s.[i] with
      | Escaped, '\\' -> Buffer.add_char buf '\\'; st := Not_escaped
      | Not_escaped, '\\' -> st := Escaped
      | Escaped, 'n' -> Buffer.add_char buf '\n'; st := Not_escaped
      | Escaped, 'r' -> Buffer.add_char buf '\r'; st := Not_escaped
      | Escaped, 't' -> Buffer.add_char buf '\t'; st := Not_escaped
      | Escaped, 'b' -> Buffer.add_char buf '\b'; st := Not_escaped
      | Escaped, '"' -> Buffer.add_char buf '"'; st := Not_escaped
      | Escaped, ('0'..'9' as c) ->
          st := Escaped_int_1 (Char.code c - Char.code '0')
      | Escaped_int_1 i, ('0'..'9' as c) ->
          st := Escaped_int_2 (10*i+Char.code c - Char.code '0')
      | Escaped_int_2 i, ('0'..'9' as c) ->
          Buffer.add_char buf (Char.chr (10*i+Char.code c - Char.code '0'));
          st := Not_escaped
      | (Escaped | Escaped_int_1 _ | Escaped_int_2 _), c ->
          error lexbuf (Printf.sprintf "wrong escape `%c`" c)
      | Not_escaped, c -> Buffer.add_char buf c;
    done;
    Buffer.contents buf


# 53 "src/nunchaku_coq_sexp_lex.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\001\000\005\000\250\255\251\255\252\255\253\255\001\000\
    \254\255\010\000\002\000\248\255\013\000\004\000\023\000\033\000\
    ";
  Lexing.lex_backtrk = 
   "\255\255\008\000\006\000\255\255\255\255\255\255\255\255\002\000\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_default = 
   "\002\000\013\000\002\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\009\000\010\000\000\000\255\255\013\000\255\255\255\255\
    ";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\006\000\008\000\008\000\255\255\007\000\255\255\255\255\
    \000\000\000\000\255\255\010\000\255\255\000\000\000\000\010\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \006\000\000\000\001\000\011\000\000\000\255\255\011\000\255\255\
    \004\000\003\000\010\000\000\000\010\000\255\255\255\255\013\000\
    \000\000\000\000\010\000\010\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\009\000\000\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\000\000\000\000\012\000\000\000\000\000\
    \012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\013\000\000\000\000\000\000\000\000\000\000\000\013\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\013\000\000\000\000\000\000\000\013\000\
    \000\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \005\000\255\255\255\255\000\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\007\000\010\000\000\000\002\000\002\000\
    \255\255\255\255\002\000\009\000\009\000\255\255\255\255\009\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\001\000\255\255\002\000\013\000\002\000\
    \000\000\000\000\009\000\255\255\009\000\002\000\002\000\012\000\
    \255\255\255\255\009\000\009\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\255\255\255\255\001\000\255\255\255\255\
    \013\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\012\000\255\255\255\255\255\255\255\255\255\255\012\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\012\000\255\255\255\255\255\255\012\000\
    \255\255\012\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\001\000\010\000\255\255\013\000\002\000\255\255\255\255\
    \255\255\255\255\009\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 65 "src/nunchaku_coq_sexp_lex.mll"
                 ( token lexbuf )
# 164 "src/nunchaku_coq_sexp_lex.ml"

  | 1 ->
# 66 "src/nunchaku_coq_sexp_lex.mll"
            ( Lexing.new_line lexbuf; token lexbuf )
# 169 "src/nunchaku_coq_sexp_lex.ml"

  | 2 ->
# 67 "src/nunchaku_coq_sexp_lex.mll"
          ( token lexbuf )
# 174 "src/nunchaku_coq_sexp_lex.ml"

  | 3 ->
# 68 "src/nunchaku_coq_sexp_lex.mll"
        ( EOI )
# 179 "src/nunchaku_coq_sexp_lex.ml"

  | 4 ->
# 69 "src/nunchaku_coq_sexp_lex.mll"
        ( LIST_OPEN )
# 184 "src/nunchaku_coq_sexp_lex.ml"

  | 5 ->
# 70 "src/nunchaku_coq_sexp_lex.mll"
        ( LIST_CLOSE )
# 189 "src/nunchaku_coq_sexp_lex.ml"

  | 6 ->
# 71 "src/nunchaku_coq_sexp_lex.mll"
       ( ATOM (Lexing.lexeme lexbuf) )
# 194 "src/nunchaku_coq_sexp_lex.ml"

  | 7 ->
# 72 "src/nunchaku_coq_sexp_lex.mll"
           ( ATOM (remove_quotes lexbuf (Lexing.lexeme lexbuf)) )
# 199 "src/nunchaku_coq_sexp_lex.ml"

  | 8 ->
let
# 73 "src/nunchaku_coq_sexp_lex.mll"
         c
# 205 "src/nunchaku_coq_sexp_lex.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 74 "src/nunchaku_coq_sexp_lex.mll"
    ( error lexbuf (Printf.sprintf "lexing failed on char `%c`" c) )
# 209 "src/nunchaku_coq_sexp_lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

